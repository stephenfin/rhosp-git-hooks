#!/usr/bin/env python

"""Pre-push hook for 'rhos-N.0-rhelM' branches.

- https://git-scm.com/docs/githooks#pre-receive

"""

from __future__ import print_function

import json
import re
import subprocess
import sys

import requests

BUG_URL = 'https://bugzilla.redhat.com/rest/bug/%d?include_fields=target_release'  # noqa
RESOLVES_RE = re.compile(r'^Resolves: rhbz#(\d*)$', re.MULTILINE)
VERSION_RE = re.compile(r'\d+\.\d')


def validate_commit(commit, branch_version):
    """Validate an individual commit.

    Checks the commit message for commit referenced by ``commit`` for the
    presence of a ``Resolves:`` footer. If present, it ensures that bug is
    assigned to the same release as the version of the branch, given by
    ``branch_version``.

    :param commit: A sha1 hash for a commit being pushed.
    :param branch_version: The version associated with the chosen branch.
    """

    # this returns headers, followed by a empty line, then the message, so
    # we strip the headers
    message = subprocess.check_output([
        'git', 'cat-file', 'commit', commit]).split('\n\n', 1)[1]

    match = RESOLVES_RE.search(message)
    if not match:
        print('Commit %s does not include the required "Resolves:" '
              'footer. Modify your commit to add this.' % commit[:8])
        sys.exit(1)

    bug_id = int(match.group(1))

    req = requests.get(BUG_URL % bug_id)

    if req.status_code == 401:
        print('Bug %d, referenced by commit %s, is private. You will '
              'have to match the bug to the release manually.' % (
                bug_id, commit))
        return

    if req.status_code == 404:
        print('Bug %d, referenced by commit %s, does not exist. Typo?' % (
                bug_id, commit))
        sys.exit(1)

    if req.status_code != 200 or not req.json().get('bugs'):
        print('Got unexpected response (%d).\n\n%s' % (
                req.status_code, json.dumps(req.json(), indent=4)))
        sys.exit(1)

    bug_versions = []

    target_releases = req.json()['bugs'][0]['target_release']
    if not target_releases or target_releases[0] == '---':
        print('Bug %d, referenced by commit %s, does not have a target '
              'release set. This must be set first.' % (
                bug_id, commit))
        sys.exit(1)

    for target_release in target_releases:
        bug_version = VERSION_RE.search(target_release).group(0)
        bug_versions.append(bug_version)
        if bug_version == branch_version:
            break
    else:
        print('This patch is for OSP %s yet bug %d is for version(s) %s. '
              'Update the bug target release then try again.' % (
                branch_version, bug_id, ', '.join(bug_versions)))
        sys.exit(1)


def validate_push(local_ref, local_sha1, remote_ref, remote_sha1):

    if not remote_ref.endswith('-patches'):
        # we also care about anything that isn't a '-patches' branch
        print('Not a `-patches` branch. Ignoring')
        return

    # when you create or delete a ref, the old or new rev equals 40 zeroes
    # respectively
    branch_created = local_sha1 == '0' * 40
    branch_deleted = remote_sha1 == '0' * 40

    if branch_created or branch_deleted:
        # we also don't care if a branch is being deleted or created - only
        # for patches to new branches
        print('Deleting or creating a branch. Ignoring')
        return

    match = VERSION_RE.search(remote_ref)
    if not match:
        print('Branch %s is neither a private branch not a release '
              'branch. Whut?' % remote_ref)
        sys.exit(1)

    branch_version = match.group(0)

    commits = subprocess.check_output([
        'git', 'rev-list', remote_sha1 + '..' + local_sha1]).strip()

    if not commits:
        # force push and yes, you guessed it, we don't care
        print('Force push. Ignoring')
        return

    for commit in commits.split('\n'):
        validate_commit(commit, branch_version)


def main():
    for line in sys.stdin.readlines():
        local_ref, local_sha1, remote_ref, remote_sha1 = line.strip().split()
        validate_push(local_ref, local_sha1, remote_ref, remote_sha1)


if __name__ == '__main__':
    main()
